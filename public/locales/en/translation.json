{
    "main": {
        "tittle": "<1>Learn</1> react to the next level.",
        "description": "Ready to level up your React skills? Let's build something awesome together.",
        "start": " Start",
        "components": "in React is a reusable, self-contained piece of UI. It can be as small as a button or as large as an entire page. Components can be functional or class-based, but most modern React apps use functional components for simplicity and better performance.",
        "hooks": "Hooks are functions that let you use state and other React features in functional components. They were introduced in React 16.8 and allow you to manage state, side effects, and context without writing class components. Common hooks include useState, useEffect, and useContext.",
        "props": "Props (short for properties) are how you pass data from one component to another in React. They are read-only and allow you to customize components by passing values like strings, numbers, or even other components. Props help make components reusable and dynamic.",
        "cleanCode": "Clean code is simple, readable, and easy to maintain. It uses meaningful names, small and focused functions, and follows the single responsibility principle to ensure each piece of code does one thing well. Clean code avoids unnecessary comments by making the code itself self-explanatory, reduces duplication, handles errors clearly, and maintains consistent formatting. It prioritizes clarity over cleverness, making it easier for others (and your future self) to understand, test, and improve the code over time. Clean code is not just about aesthetics; it's about creating software that is robust, scalable, and easy to work with in the long run.",
        "solidPrinciples": "SOLID is an acronym for five design principles that help developers create maintainable and scalable software. These principles are: Single Responsibility Principle (SRP), Open/Closed Principle (OCP), Liskov Substitution Principle (LSP), Interface Segregation Principle (ISP), and Dependency Inversion Principle (DIP). Following SOLID principles leads to better code organization, easier testing, and improved flexibility in software design."
    },
    "Navbar": {
        "project": "Project",
        "home": "Home",
        "catalog": "Shop",
        "pricing": "Pricing",
        "developers": "Developers",
        "logIn": "Log in"
    },
    "titles": {
      "titleOne": "Learn about",
      "titleTwo": "Know about other topics"
    },
    "links": {
        "linkCard": "learn more ->",
        "linkSecundaryCard": "More info"
    },
    "ClassOne": {
        "title": "What is react",
        "videoLink": "https://www.youtube.com/watch?v=lWQ69WX7-hA",
        "content": "Declarative React helps you create interactive user interfaces easily. Design simple views for each state in your application, and React will take care of efficiently updating and rendering the correct components when data changes. Declarative views make your code more predictable, therefore easy to debug. Component-based Create encapsulated components that handle their own state, and turn them into complex user interfaces. Since component logic is written in JavaScript and not in templates, you can easily pass data through your application and keep state out of the DOM. Learn it once, write it anywhere In React we don't leave out the rest of your technology tools, so you can develop new features without rewriting existing code. React can also render from the server using Node, as well as power mobile apps using React Native. Translated with DeepL.com (free version)"
    }
}